{"version":3,"sources":["logo.svg","Git Battle/Node.jsx","Git Battle/PopularRepos.jsx","Git Battle/BattleNode.jsx","Git Battle/BattlePage.jsx","Git Battle/CompareGithub.jsx","Git Battle/MainPage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Main","this","props","gridNo","name","author","avatar","url","currentPeriodStars","language","headerText","toString","className","size","src","width","height","href","React","Component","state","data","currentPage","renderGridData","a","link","fetch","response","json","responseJson","console","log","fetchData","then","setState","nodes","i","push","map","node","nodeIdx","description","getClassName","onClick","renderGrid","status","followers","following","repos","headerClassName","result","data1","data2","isSubmitted","scores","userName1","document","getElementById","value","userName2","fetchUserData","userName","user1","user2","message","scoreUser1","scoreUser2","public_repos","blog","diffOfFol1","diffOfFol2","company","CompareGithub","alert","user","avatar_url","bio","fetchResultNodes","id","type","placeholder","handleClick","handler","handleClickPopular","handleClickBattle","renderPopular","renderBattle","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3d324834.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport './CSS/Node.css';\r\n\r\nexport default class Main extends React.Component{\r\n    render(){\r\n        const {\r\n            gridNo,\r\n            name, \r\n            author,\r\n            avatar,\r\n            url,\r\n            currentPeriodStars,\r\n            language\r\n        } = this.props;\r\n\r\n        // +1 since gridNo starts with 0\r\n        let headerText = gridNo.toString();\r\n        headerText = \"#\" + headerText;\r\n\r\n        return(\r\n            <div className=\"Node\">\r\n                <header className=\"Header\">\r\n                    <font size=\"6\">{headerText}</font>\r\n                </header>\r\n\r\n                <div className=\"Image\">\r\n                    <img src={avatar} width=\"150\" height=\"150\"/>\r\n                </div>\r\n\r\n                <div className=\"NodeName\">\r\n                    <font size=\"5\">\r\n                        <a className=\"CenterText\" href={url}>\r\n                            {name}\r\n                        </a>\r\n                    </font>\r\n                </div>\r\n\r\n                <div>\r\n                    <ul>\r\n                        <li>üë®‚Äçüíª {author}</li>\r\n                        <li>‚≠ê {currentPeriodStars}</li>\r\n                        <li>üìù {language}</li>\r\n                    </ul>\r\n                </div>\r\n\r\n                \r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from 'react';\r\nimport Node from './Node.jsx';\r\nimport './CSS/PopularRepos.css';\r\n\r\nexport default class Main extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            data : null,\r\n            currentPage : \"all\"\r\n        };\r\n        this.renderGridData(\"all\");\r\n    }\r\n\r\n    renderGridData(language){\r\n        async function fetchData(){\r\n            let link = \"https://github-trending-api.now.sh/repositories\";\r\n            if(language !== \"all\"){\r\n                link = link + \"?language=\" + language;\r\n            }\r\n            try{\r\n                let response = await fetch(link);\r\n                let responseJson = await response.json();\r\n                return responseJson;\r\n            }\r\n            catch(error){\r\n                console.log(error);\r\n            }\r\n        }\r\n        fetchData().then((data) => {\r\n            this.setState({\r\n                data,\r\n                currentPage : language\r\n            });\r\n        });\r\n    }\r\n\r\n    renderGrid(){\r\n        const data = this.state.data;\r\n        if(data === null){\r\n            return; \r\n        }\r\n\r\n        let nodes = [];   \r\n\r\n        for(let i=0; i<25; i++){\r\n            nodes.push(i);\r\n        }\r\n\r\n        return nodes.map((node, nodeIdx) => {\r\n            console.log(data[nodeIdx]);\r\n            return(\r\n                <Node \r\n                    // +1 since nodeIdx starts with 0\r\n                    gridNo = {nodeIdx+1}\r\n                    name = {data[nodeIdx].name}\r\n                    author = {data[nodeIdx].author}\r\n                    avatar = {data[nodeIdx].avatar}\r\n                    url = {data[nodeIdx].url}\r\n                    description = {data[nodeIdx].description}\r\n                    currentPeriodStars = {data[nodeIdx].currentPeriodStars}\r\n                    language = {data[nodeIdx].language}\r\n                ></Node>\r\n            );\r\n        });\r\n    }\r\n\r\n    getClassName(currentPage){\r\n        if(currentPage === this.state.currentPage){\r\n            return \"LanguageIsCurrent\";\r\n        }\r\n        return \"Language\";\r\n    }\r\n    \r\n    \r\n\r\n    render(){\r\n        return(\r\n            <div className=\"BodyPopularRepos\">\r\n                <div className=\"LanguagesList\">\r\n                    <div\r\n                        className = {this.getClassName(\"all\")}\r\n                        onClick={() => {this.renderGridData(\"all\")}}\r\n                    >   \r\n                        All\r\n                    </div>\r\n\r\n                    <div \r\n                        className = {this.getClassName(\"java\")}\r\n                        onClick={() => {this.renderGridData(\"java\")}}\r\n                    >\r\n                        Java\r\n                    </div>\r\n                    \r\n                    <div \r\n                        className = {this.getClassName(\"python\")}\r\n                        onClick={() => {this.renderGridData(\"python\")}}\r\n                    >\r\n                        Python\r\n                    </div>\r\n                    \r\n                    <div \r\n                        className = {this.getClassName(\"javascript\")}\r\n                        onClick={() => {this.renderGridData(\"javascript\")}}\r\n                    >\r\n                        JavaScript\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"Grid\">\r\n                    {this.renderGrid()}\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport './CSS/BattleNode.css';\r\n\r\nexport default class Main extends React.Component{\r\n    render(){\r\n        const {\r\n            status,\r\n            avatar,\r\n            url,\r\n            name,\r\n            description,\r\n            followers,\r\n            following,\r\n            repos,\r\n            result\r\n        } = this.props;\r\n\r\n        let headerClassName = \"BattleNode-Header\";\r\n        if (status==\"WINNER\") {\r\n            headerClassName += \"-Winner\";\r\n        }\r\n\r\n\r\n        return(\r\n            \r\n            <div className=\"BattleNode\">\r\n                <header className={headerClassName}>\r\n                    <font size=\"6\">{status}</font>\r\n                </header>\r\n\r\n                <div className=\"Image\">\r\n                    <img src={avatar} width=\"150\" height=\"150\"/>\r\n                </div>\r\n\r\n                <div className=\"NodeName\">\r\n                    <font size=\"5\">\r\n                        <a className=\"CenterText\" href={url}>\r\n                            {name}\r\n                        </a>\r\n                    </font>\r\n                </div>\r\n\r\n                <div>\r\n                    <ul>\r\n                        <li>{followers} followers</li>\r\n                        <li>{following} following</li>\r\n                        <li>{repos} repositories</li>\r\n                    </ul>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from 'react';\r\nimport CompareGithub from './CompareGithub.jsx';\r\nimport './CSS/BattlePage.css';\r\nimport BattleNode from './BattleNode.jsx';\r\n\r\nexport default class Main extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            data1 : null,\r\n            data2 : null,\r\n            isSubmitted : false,\r\n            scores : null,\r\n            result : null\r\n        };\r\n    }\r\n\r\n    handleClick(){\r\n\r\n        const userName1 = document.getElementById(\"userName1\").value;\r\n        const userName2 = document.getElementById(\"userName2\").value;\r\n\r\n        // If userName is empty\r\n        if(userName1 == \"\" || userName2 == \"\"){\r\n            alert(\"Enter username\");\r\n            return\r\n        }\r\n\r\n        async function fetchUserData(userName){\r\n            try{\r\n                let response = await fetch(\"https://api.github.com/users/\" + userName);\r\n                let responseJson = await response.json();\r\n                return responseJson;\r\n            }\r\n            catch(error){\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n        fetchUserData(userName1).then((user1) => {\r\n            this.setState({\r\n                data1 : {user1}\r\n            });\r\n            console.log(this.state.data1.user1);\r\n\r\n            // For user2\r\n            fetchUserData(userName2).then((user2) => {\r\n                this.setState({\r\n                    data2 : {user2},\r\n                });\r\n                console.log(this.state.data2.user2);\r\n\r\n                // If userName is unavailable/invalid\r\n                if(this.state.data1.user1.message == \"Not Found\" || this.state.data2.user2.message == \"Not Found\"){\r\n                    alert(\"User not found!\");\r\n                    return;\r\n                }\r\n\r\n                const scores = CompareGithub(this.state.data1.user1, this.state.data2.user2);\r\n                \r\n                // 0 states user1 won, 1 states user2 won.\r\n                const result = (scores.scoreUser1 > scores.scoreUser2) ? 0 : 1;\r\n                \r\n                this.setState({\r\n                    result,\r\n                    scores,\r\n                    isSubmitted : true\r\n                });\r\n                console.log(this.state.scores);\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    fetchResultNodes(){\r\n\r\n        let nodes = [this.state.data1.user1, this.state.data2.user2];\r\n        return nodes.map((user, nodeIdx) => {\r\n            return (\r\n                <BattleNode\r\n                    status={(this.state.result == nodeIdx) ? \"WINNER\" : \"LOSER\"}\r\n                    avatar={user.avatar_url}\r\n                    url={\"\"}\r\n                    name={user.name}\r\n                    description={user.bio}\r\n                    followers={user.followers}\r\n                    following={user.following}\r\n                    repos={user.public_repos}\r\n                />\r\n            );\r\n        });\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"BodyBattle\">\r\n                <main>\r\n                    <div>\r\n                        <text className=\"GitText\">GITBATTLE</text>\r\n                    </div>\r\n                    \r\n                    <div>\r\n                        {(this.state.isSubmitted) ? \r\n                                <div className=\"ResultNodes\"> {this.fetchResultNodes()} </div>\r\n                                \r\n                            :   \r\n                            <div>\r\n                                <form className=\"Form\">\r\n                                    <div className=\"FormElement\">\r\n                                        <input\r\n                                            id=\"userName1\" \r\n                                            type=\"text\"\r\n                                            placeholder=\"Enter username 1\">\r\n                                        </input>\r\n                                    </div>\r\n\r\n                                    <div className=\"FormElement\">   \r\n                                        <p className=\"Vs\">vs</p>\r\n                                        {/* <h1 className=\"Vs\">vs</h1> */}\r\n                                    </div>\r\n\r\n                                    <div className=\"FormElement\">\r\n                                        <input\r\n                                            id=\"userName2\" \r\n                                            placeholder=\"Enter username 2\">\r\n                                        </input>\r\n                                    </div>\r\n                                </form>\r\n\r\n                                <div className=\"SubmitButtonDiv\">\r\n                                    <button\r\n                                        className=\"SubmitButton\" \r\n                                        onClick={() => this.handleClick()}>\r\n                                        BATTLE\r\n                                    </button>\r\n                                </div>\r\n                            </div> \r\n\r\n                            }\r\n                    </div>\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default function CompareGithub(user1, user2){\r\n    let scoreUser1 = 0;\r\n    let scoreUser2 = 0;\r\n\r\n    // 1. Check number of repos\r\n    if(user1.public_repos === user2.public_repos){\r\n        scoreUser1 += 1;\r\n        scoreUser2 += 1;\r\n    } else if(user1.public_repos > user2.public_repos){\r\n        scoreUser1 += 2;\r\n    } else if(user1.public_repos < user2.public_repos){\r\n        scoreUser2 += 2;\r\n    }\r\n\r\n    // 2. Check if user has a blog of his own\r\n    if(user1.blog!==\"\" && user2.blog!==\"\"){\r\n        scoreUser1 += 1;\r\n        scoreUser2 += 1;\r\n    } else if(user1.blog !== \"\"){\r\n        scoreUser1 += 2;\r\n    } else if(user2.blog !== \"\"){\r\n        scoreUser2 += 2;\r\n    }\r\n\r\n    // 3. Check difference of followers and following\r\n    const diffOfFol1 = user1.followers - user1.following;\r\n    const diffOfFol2 = user2.followers - user2.following;\r\n\r\n    if(diffOfFol1 == diffOfFol2){\r\n        scoreUser1 += 1;\r\n        scoreUser2 += 1;\r\n    } else if(diffOfFol1 > diffOfFol2){\r\n        scoreUser1 += 2;\r\n    } else if(diffOfFol2 < diffOfFol1){\r\n        scoreUser2 += 2;\r\n    }\r\n\r\n    // 4. Check if the user has a company of his own\r\n    if(user1.company != null && user2.company != null){\r\n        scoreUser1 += 1;\r\n        scoreUser2 += 1;\r\n    } else if(user1.company != null){\r\n        scoreUser1 += 2;\r\n    } else if(user2.company != null){\r\n        scoreUser2 += 2;\r\n    }\r\n\r\n    return ({\r\n        scoreUser1,\r\n        scoreUser2\r\n    });\r\n\r\n}","import React from 'react';\r\nimport PopularRepos from './PopularRepos.jsx';\r\nimport BattlePage from './BattlePage';\r\nimport './CSS/MainPage.css';\r\n\r\nexport default class Main extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            currentPage : \"PopularRepos\"\r\n        };\r\n    }\r\n\r\n    handleClickPopular(){\r\n        this.setState({currentPage : \"PopularRepos\"});\r\n    }\r\n\r\n    handleClickBattle(){\r\n        this.setState({currentPage : \"Battle\"});\r\n    }\r\n\r\n    renderPopular(){\r\n        return (<PopularRepos/>);\r\n    }\r\n\r\n    handler(){\r\n        this.setState({currentPage : \"PopularRepos\"});\r\n    }\r\n\r\n    renderBattle(){\r\n        return (\r\n            <BattlePage \r\n                className=\"BattlePage\" \r\n                handler={() => this.handler()}\r\n            >\r\n            </BattlePage>);\r\n        // return(<div className=\"BattlePage\">hi</div>);\r\n    }\r\n\r\n    render(){\r\n        const currentPage = this.state.currentPage;\r\n        return (\r\n            <div className=\"Body\">\r\n                <div className=\"SelectionHeader\">\r\n                    <div \r\n                        className=\"HeaderOption\"\r\n                        onClick={() => this.handleClickPopular()}\r\n                    >\r\n                        Popular\r\n                    </div>\r\n\r\n                    <div \r\n                        className = \"HeaderOption\"\r\n                        onClick={() => this.handleClickBattle()}\r\n                    >\r\n                        Battle\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    {(currentPage===\"PopularRepos\") ? this.renderPopular() : this.renderBattle()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MainPage from './Git Battle/MainPage.jsx';\n\nfunction App() {\n  return (\n    <MainPage/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}